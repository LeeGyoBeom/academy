// 한줄 주석 : 코드에는 영향을 주지 않는다.
// ㄴ 내가 또는 타인을 위해 메모를 남기는 것.

// 우리가 항상 염두를 해둬야 하는건 프로그래밍은 항상 효율을
//최우선 한다.


/*단위 주석







*/

//1iIlL0Oo



//매크로 
// ㄴ 코드의 유지부수와 가독성 향상을 위해서 가져왔다.
#pragma region 프로그래밍 언어
/*
 프로그래밍이란?
  -programming. promgram에 ing가 붙었으니 지금 프로그램을 하고 있다.라고
  직역 할 수 있다.
  -지금 프로그램을 하고 있다는 얘기는 결국 프로그램을 만드는 것
  개발을 의미한다.
  - 프로그래밍 언어란?
  -컴퓨터와 대화 또는 명령을 할 수 있는 일련의 명령문을 작성 할 수 있는
  언어를 의미한다. (즉, 프로그래밍 언어를 이용하면 프로그램을 만드는 것이 가능
  -프로그래밍 언어에는 다양한 언어가 존재하지만 크게 2가지로 분류할 수 있다.
   1. 특정 기능 구현에 최적화 된 언어 (C#, script)
   2. 범용적 언어 (c++ )
    
    프로그래밍 언어를 컴퓨터에서 이해하는 방법
     -C/C++ 언어로 작성돼 있는 코드는 컴퓨터가 이해 할 수 없는 명령이기 때문에
 C/C++ 언어는 중간에서 언어를 해석해 주는 번역가 역할을 하는 무언가가 필요하다.
 ▶그게 바로 "컴파일러"
 ㄴ 컴파일러는 해당 코드를 컴퓨터가 이해할 수 있는 언어로 변환하는 역할을 한다.
  C/C++는 컴파일러 존재
  C#은 없음
  
  ▶즉, 컴파일러가 프로그래밍 언어와 컴퓨터 사이에서 통역사 역할을 해주기 때문에
  프로그래밍 언어를 작성하는 사람은 컴퓨터의 언어를 모른다 하더라도 컴퓨터에게
  명령을 내리는 것이 가능하다.
  
  ▶ 컴파일러 (C/C++) != 인터프리터 (C# script)
  

  ▶ 프로그래밍 기술 및 기법 
  -프로그래밍 기술은 점차 발전해 왔으며 앞으로도 계속 발전해 나갈것이다.
  ㄴ 현재는 크게 4가지로 분류해서 파악을 해두면 좋다.
  1. 순차적 프로그래밍 ( 절차지향) 대표적으로 C언어
  ㄴ 가장 초기부터 사용된 기법으로 코드의 흐름에 따라 프로그래밍 하는깃ㄹ
  ㄴ요약을 하면 프로그램의 실행부터 종료까지의 흐름을 그대로 프로그래밍 한다.
  ㄴ 이 방식은 프로그램의 흐름을 따라가기 때문에 구조적이지 못 하고 코드가 여기저기 흩어져 있기 때문에 유지보수가 어렵다는 단점이 있다.

  2. 구조적 프로그래밍
  ㄴ 순차적 프로그래밍의 단점을 보완하기 위해 나온 방식으로 코드의 구조를 기능 단위로 묶는 방식
  ㄴ 함수 지향 프로그래밍이라고 부르며 순차적 프로그래밍보다 유지보수가 용이하다는 장점이 있다.
  ㄴ 문제가 생겼을때 해당 문제가 발생한 기능만 중점적으로 살펴보면 되기 때문에

  3. 객체지향 프로그래밍 (C++는 객체지향과 절차지양이 혼합 돼있다), (객체지향은 구조적과 절차지향이 혼합 돼있다)
  ㄴ 위의 두 방식과는 전혀 다른 방식으로 코드의 기준을 "객체" 단위로 묶어 프로그래밍하는 방식을 의미한다.
  ㄴ 모든 대상에는 속성과 메세드가 있고 이를 하나로 묶어 객체로 만드는방식이며
  여기에서 말하는 대상에는 눈에 보이지 않는 것들도 포함이 된다.
  ㄴ객체지향 기법에는 상속이나 다형성등 다양한 개념이 존재하지만 그건 이후에 하자.
  

  4. 컴포넌트 기반 프로그래밍 (유니티,언리언,크라이 리는 컴포넌트 기반)
  ㄴ 비교적 최근에 등장한 개념이며 코딩의 기준을 객체가 아닌 컴포넌트 단위로
  프로그래밍하는 방식
  
  ㄴ 객체지향 프로그래밍이 사람이라는 객체를 단위로 프로그래밍 한다면 컴포넌트 방식은
  사람이 가지고 있는 컴포넌트, 즉 -> 머리,팔,다리,몸 등을 세분화 코딩한다.

  ㄴ각각의 컴포넌트는 독립적으로 움직이는 부품과 같으므로 다리를 뗴서 동물에게 붙여주며 걷거나
  달리는 것이 가능하다.

  ㄴ 앞으로 배우게될 unity engine에서 추구하는 프로그래밍 방식

  ㄴ 굉장히 많은 컴포넌트(기능)가 있고 이것을 추가하는 것만으로 원하는 기능을 간단하게 만들어 줄 수 있다.

  ㄴ컴포넌트 프로그래밍은 게임 엔진,3D 엔진에서 많이 쓰이는 방식
  





*/
#pragma endregion

//헤더파일 ( C++ 프로그래밍에서 가장 기본이자 중요한 헤더파일)
// iostream : 입, 출력을 담당하는 C++ 표준 라이브러리
// #include 키워드는 해당 경로에 있는 파일의 내용을 단순하게 복사하는 역할을 한다
// # : ㄴ명령 지시자
//표준 라이브러리는 보통 <헤더파일>이렇게 사용이 된다.
//프로그래밍 언어도 결국 사람이 만들었기 때문에 익숙해 진다면 대략적인 유추가 가능하다.
//stream은 여러 장치에 입력과 출력 작업이 실행되는것을 "추상화"하여 나타낸것
//iostream에 있는 cout,cin,그리고 endl
#include <iostream>
// 구버전 헤더 파일
//ㄴ C언어
#include <windows.h>
//헤더파일을 포함할때는 <> , "" 두 종류가 있다.
// 표준 사용 파일, 사용자 정의 헤더 파일

#pragma region 메인 함수
- 메인 함수는 하나만 존재한다.
ㄴ C / C++언어로 작성 돼 있는로그램이 처음 실행되는 부분

- C / C++언어는 프로그램이 처음 실행되기 위해서 반드시 main 함수를 포함하고 있어야한다
main함수는 프로그램이 가장 먼저 시작되는 부분이기 떄문에 해당 함수가 존재하지 않을 경우
프로그램 자체가 실행되지 않는다.
★ C / C++ 언어가 프로그램으로 변환되기 위해서 거치는 큰 단계
전처리기 컴파일 링크
// () [] 

//std(표준)라는 이름안에 정의되어 있는 것을 그냥 사용하겠다
//ㄴ 이름 공간 std에 선언된것은 std라는 이름 공간의 선언 없이 접근하겠다는 선언 지지문
//ㄴ 프로그래밍에서는 이름 충돌이라는 것이 생길 수가 있는데 같은 이름일 경우 컴파일 에러가
//발생한다.
//ㄴ 이름 공간 std에 선언된 모든 것에 접근할때에는 이름 공간 지정을 생략하겠다는 선언
using namespace std;


#pragma endregion
void main()

{


    /*
    코드 작성의 기본
    ㄴ 빨간색 빝줄이 있으면 안 된다
    ㄴ 빨간색 밑줄을 보게 된다면
    1. 오타 체크
    2. 앞 뒤를 체크할것
    3. ;이 빠졌는지 확인

    참고
    ㄴ ;은 코딩의 마침표와 같다
       ㄴ 반드시 사용을 해야 한다.
    */
    // std:표준 
    // cout : console output 약자 (출력해라)
    // end line  (줄을 바꾼다 -> 개행)

    // << : 출력 연산자 : cout (C언어는 printf ())
    // >> : 입력 연산자 : cin (C언어는 scanf())

    // :: -> 접근 연산자
    //std : 메모리 사용량 좋음 작업효율 떨어짐

    
     cout << "지온에 온걸 환영해" << endl;
     cout << "지온에 온걸 환영해" << endl;
     cout << "지온에 온걸 환영해" << endl;
     cout << "지온에 온걸 환영해" << endl;
     cout << "문자 출력 :" << "쌍따옴표 안에 작성하면 된다." << endl;
     cout << "숫자 출력 :" << 12345 << "그냥 숫자 적으면 된다." << endl;
     cout << "＆" << endl;
     cout << "★" << endl;

     //자기 소개 출력
     cout << "이교범 25 01056255319 서울시 강동구 길동 xnrnqndl1@gmail.com" << endl;
     cout << "인디게임" << endl;


}t





#pragma region c++ 오류
// ++ 오류 
/*++ 오류
ㄴ 문법
 문법은 오류를 찾아준다

ㄴ 논리
논리 오류는 프로그래머가 직접 */
#pragma endregion 
